apiVersion: apiextensions.k8s.io/v1alpha
kind: CustomResourceDefinition
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: collectors.example.com
spec:
  group: example.com
  scope: Namespaced
  names:
    plural: collectors
    singular: collector
    kind: Collector
  versions:
    - name: v1alpha
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: Collector is the Schema for the collector API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              type: object
              description: CollectorSpec defines the desired state of Collector
              properties:
                # collector: {name, version, configuration}
                collector:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the collector
                    version:
                      type: string
                      description: Version of the collector
                    configuration:
                      type: string
                      description: Collector's Base64 Encoded Configuration
                # tenant: {id, reference, instance}
                tenant:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Tenant ID of the customer being deployed
                    reference:
                      type: string
                      description: Ref of the tenant
                    instance:
                      type: string
                      description: Instance of the tenant this collector is deployed for
                # cluster will define the environment (gke-dev, gke-prod, etc)
                cluster:
                  type: string
                  description: cluster
            status:
              description: MemcachedStatus defines the observed state of Memcached
              properties:
                conditions:
                  description: Conditions store the status conditions of the Memcached
                    instances
                  items:
                    description: "Condition contains details for one aspect of the current
                        state of this API Resource. --- This struct is intended for direct
                        use as an array at the field path .status.conditions.  For example,
                        \n type FooStatus struct{ // Represents the observations of a
                        foo's current state. // Known .status.conditions.type are: \"Available\",
                        \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                        // +listType=map // +listMapKey=type Conditions []metav1.Condition
                        `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                        protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition
                          transitioned from one status to another. This should be when
                          the underlying condition changed.  If that is not known, then
                          using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: message is a human readable message indicating
                          details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation
                          that the condition was set based upon. For instance, if .metadata.generation
                          is currently 12, but the .status.conditions[x].observedGeneration
                          is 9, the condition is out of date with respect to the current
                          state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: reason contains a programmatic identifier indicating
                          the reason for the condition's last transition. Producers
                          of specific condition types may define expected values and
                          meanings for this field, and whether the values are considered
                          a guaranteed API. The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                          --- Many .condition.type values are consistent across resources
                          like Available, but because arbitrary conditions can be useful
                          (see .node.status.conditions), the ability to deconflict is
                          important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
              type: object
          type: object
      subresources:
        status: { }
      additionalPrinterColumns:
        - name: Status
          type: string
          description: Status of the Collector
          jsonPath: .status.conditions[0].reason
        - name: Age
          jsonPath: .metadata.creationTimestamp
          description: The age of this resource
          type: date
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: [ ]
  storedVersions: [ ]
